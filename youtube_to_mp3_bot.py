import os
import asyncio
import yt_dlp
import logging
import shutil
from concurrent.futures import ThreadPoolExecutor

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile

import ffmpeg  # ffmpeg-python

# ---------- CONFIG ----------
TOKEN = os.getenv("7975956634:AAGn28QsJThMu1JEgjw949DQ0KF5bDvKoHs", "–¢–í–û–ô_–¢–û–ö–ï–ù_–¢–£–¢")  # <-- –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ env
DOWNLOAD_PATH = "downloads"
MAX_WORKERS = 2               # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ ThreadPool –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
QUEUE_MAXSIZE = 200           # –º–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏
TG_MAX_BYTES = 50 * 1024 * 1024  # –ª–∏–º–∏—Ç Telegram ~50MB
COMPRESS_THRESHOLD_MB = 48    # –µ—Å–ª–∏ > —ç—Ç–æ–≥–æ ‚Äî —Å–∂–∞—Ç—å
COMPRESSED_BITRATE = "96k"    # –±–∏—Ç—Ä–µ–π—Ç –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è
USE_COOKIES = os.path.exists("cookies.txt")  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º cookies.txt, –µ—Å–ª–∏ –µ—Å—Ç—å
# ----------------------------

os.makedirs(DOWNLOAD_PATH, exist_ok=True)

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()
# –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî dict {id, user_id, chat_id, url}
task_queue: asyncio.Queue = asyncio.Queue(maxsize=QUEUE_MAXSIZE)
executor = ThreadPoolExecutor(max_workers=MAX_WORKERS)


async def run_blocking(func, *args, **kwargs):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å blocking-—Ñ—É–Ω–∫—Ü–∏—é –≤ ThreadPoolExecutor –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(executor, lambda: func(*args, **kwargs))


def yt_download_blocking(url: str, outtmpl: str, ydl_opts: dict):
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ yt-dlp (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç info dict."""
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
    return info


def compress_mp3_blocking(input_path: str, output_path: str, bitrate: str):
    """–°–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ ffmpeg (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è)."""
    # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg-python (–æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç ffmpeg –±–∏–Ω–∞—Ä—å)
    (
        ffmpeg
        .input(input_path)
        .output(output_path, audio_bitrate=bitrate, vn=None)
        .run(overwrite_output=True, quiet=True)
    )


def file_size_mb(path: str) -> float:
    return os.path.getsize(path) / (1024 * 1024)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Äî —è –ø–æ—Å—Ç–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø—Ä–∏—à–ª—é MP3.")


def extract_links_from_text(text: str) -> list[str]:
    candidates = []
    parts = text.split()
    for p in parts:
        if "youtube.com" in p or "youtu.be" in p:
            # —É–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω—ã–µ <> –∏–ª–∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ
            p = p.strip("<>.,;:()[]\"'")
            candidates.append(p)
    return candidates


@dp.message()
async def handle_any_message(message: types.Message):
    if not message.text:
        return

    links = extract_links_from_text(message.text)
    if not links:
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return

    responses = []
    for url in links:
        if task_queue.full():
            await message.reply("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            break
        # —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
        job = {
            "url": url,
            "user_id": message.from_user.id,
            "chat_id": message.chat.id,
            "from_username": message.from_user.username or message.from_user.first_name,
        }
        await task_queue.put(job)
        position = task_queue.qsize()
        responses.append(f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–∑–∏—Ü–∏—è ~{position}): {url}")

    if responses:
        await message.reply("\n".join(responses))


async def worker_loop():
    """–§–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä: –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏."""
    logger.info("Worker started")
    task_id = 0
    while True:
        job = await task_queue.get()
        task_id += 1
        url = job["url"]
        chat_id = job["chat_id"]
        username = job.get("from_username", "user")
        logger.info(f"[#{task_id}] Start job for {username}: {url}")

        try:
            await bot.send_message(chat_id, f"üîÅ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {url}")

            # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ yt-dlp
            safe_title_template = os.path.join(DOWNLOAD_PATH, "%(title)s.%(ext)s")
            ydl_opts = {
                "format": "bestaudio/best",
                "noplaylist": True,
                "outtmpl": safe_title_template,
                "postprocessors": [{
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192",
                }],
                "quiet": True,
                "nocheckcertificate": True,
                "extractor_retries": 10,
                "skip_unavailable_fragments": True,
                "source_address": "0.0.0.0",
                "user_agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/120.0 Safari/537.36"
                ),
            }
            if USE_COOKIES:
                ydl_opts["cookiefile"] = "cookies.txt"

            # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –ø–æ—Ç–æ–∫–µ
            info = await run_blocking(yt_download_blocking, url, safe_title_template, ydl_opts)

            title = info.get("title") or "song"
            raw_filename = os.path.join(DOWNLOAD_PATH, f"{title}.mp3")
            # yt-dlp –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp3 —Å—Ä–∞–∑—É (FFmpegExtractAudio)
            if not os.path.exists(raw_filename):
                # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ
                candidates = [f for f in os.listdir(DOWNLOAD_PATH) if f.lower().endswith(".mp3")]
                if candidates:
                    # –≤–æ–∑—å–º—ë–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π mp3
                    candidates_sorted = sorted(candidates, key=lambda f: os.path.getmtime(os.path.join(DOWNLOAD_PATH, f)), reverse=True)
                    raw_filename = os.path.join(DOWNLOAD_PATH, candidates_sorted[0])
                else:
                    raise FileNotFoundError("–ü–æ—Å–ª–µ yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω mp3-—Ñ–∞–π–ª.")

            size_mb = file_size_mb(raw_filename)
            logger.info(f"[#{task_id}] Downloaded '{title}' size={size_mb:.2f} MB")

            # –ï—Å–ª–∏ —Ñ–∞–π–ª > COMPRESS_THRESHOLD_MB, —Å–∂–∏–º–∞–µ–º
            final_filename = raw_filename
            if size_mb > COMPRESS_THRESHOLD_MB:
                await bot.send_message(chat_id, f"üîä –§–∞–π–ª {size_mb:.1f}MB ‚Äî —Å–∂–∏–º–∞—é –¥–æ {COMPRESSED_BITRATE}...")
                compressed = os.path.join(DOWNLOAD_PATH, f"{title}_small.mp3")
                await run_blocking(compress_mp3_blocking, raw_filename, compressed, COMPRESSED_BITRATE)
                # –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ
                new_mb = file_size_mb(compressed)
                logger.info(f"[#{task_id}] Compressed size={new_mb:.2f} MB")
                # –∑–∞–º–µ–Ω–∏–º –µ—Å–ª–∏ –≤—Å—ë –æ–∫
                os.remove(raw_filename)
                final_filename = compressed

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ ‚Äî Telegram –Ω–µ –ø—Ä–∏–º–µ—Ç > TG_MAX_BYTES
            final_size = os.path.getsize(final_filename)
            if final_size > TG_MAX_BYTES:
                # –µ—Å–ª–∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è > 50MB ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                await bot.send_message(chat_id, "‚ö†Ô∏è –§–∞–π–ª –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–µ 50MB –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è ‚Äî —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Telegram.")
                # –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ ‚Äî –Ω–æ —ç—Ç–æ–≥–æ –≤ –∫–æ–¥–µ –Ω–µ—Ç.
            else:
                await bot.send_message(chat_id, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
                audio_input = FSInputFile(final_filename)
                await bot.send_audio(chat_id, audio_input, title=title)
                await bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ.")

            # –£–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
            try:
                if os.path.exists(final_filename):
                    os.remove(final_filename)
            except Exception as e_rm:
                logger.warning(f"–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {final_filename}: {e_rm}")

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è")
            # –ø–æ—à–ª—ë–º –∫—Ä–∞—Ç–∫—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏:\n{e}")
            except Exception:
                pass

        finally:
            task_queue.task_done()
            await asyncio.sleep(0.5)  # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏


async def on_startup():
    # —Å—Ç–∞—Ä—Ç—É–µ–º –≤–æ—Ä–∫–µ—Ä(—ã)
    asyncio.create_task(worker_loop())
    logger.info("Bot startup complete")


if __name__ == "__main__":
    try:
        # –∑–∞–ø—É—Å–∫–∞–µ–º polling
        import signal

        # register on_startup
        dp.startup.register(on_startup)
        logger.info("Starting polling...")
        # run bot
        import asyncio
        asyncio.run(dp.start_polling(bot))
    finally:
        executor.shutdown(wait=False)
        # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        # shutil.rmtree(DOWNLOAD_PATH, ignore_errors=True)
